#~ The sequence of triangle numbers is generated by adding the natural numbers.
#So the 7th triangle number would be1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
#The first ten terms would be:
#~ 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

#~ Let us list the factors of the first seven triangle numbers:
#~ 1: 1
#~ 3: 1,3
#~ 6: 1,2,3,6
#~ 10: 1,2,5,10
#~ 15: 1,3,5,15
#~ 21: 1,3,7,21
#~ 28: 1,2,4,7,14,28
#~ We can see that 28 is the first triangle number to have over five divisors.

#~ What is the value of the first triangle number to have over five hundred divisors?

import time

def triangleNumber(n):
	sum = 0
	for i in range(1, n+1):
		sum += i
	return sum

def recTriangleNumber(n):
	if n == 1:
		return 1
	else:
		return n + (recTriangleNumber(n-1))
	
def howManyDivisors(n):
	divisors = 0
	for i in range(1, n+1):
		if ((n%i) == 0):
			divisors +=1
	return divisors

triangleList = []
divisorsList = []

#speedtesting recursive and nonrecursive forms of finding the triangle numbers
#~ triangleListTwo = []
#~ for i in range(500, 601):
	#~ start = time.clock()
	#~ triangleList.append(triangleNumber(i))
	#~ finish = time.clock()
	#~ print "Non-Rec with {0} took /t {1} time".format((i), (finish-start))
	
	#~ start = time.clock()
	#~ triangleListTwo.append(recTriangleNumber(i))
	#~ finish = time.clock()
	#~ print "Recursi with {0} took /t {1} time".format((i), (finish-start))
for i in range(1, 51):
	triangleList.append(triangleNumber(i))
	#divisorsList.append(howManyDivisors(triangleList[i]))
print triangleList
print divisorsList
print len(triangleList)
print len(divisorsList)
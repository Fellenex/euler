#~ The sequence of triangle numbers is generated by adding the natural numbers.
#So the 7th triangle number would be1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
#The first ten terms would be:
#~ 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

#~ Let us list the factors of the first seven triangle numbers:
#~ 1: 1
#~ 3: 1,3
#~ 6: 1,2,3,6
#~ 10: 1,2,5,10
#~ 15: 1,3,5,15
#~ 21: 1,3,7,21
#~ 28: 1,2,4,7,14,28
#~ We can see that 28 is the first triangle number to have over five divisors.

#~ What is the value of the first triangle number to have over five hundred divisors?

import math

def linearTriangleNumber(n):
	sum = 0
	for i in range(1, n+1):
		sum += i
	return sum

def recTriangleNumber(n):
	if n == 1:
		return 1
	else:
		return n + (recTriangleNumber(n-1))

def efficientTriangleNumber(n):
	return int((0.5)*n*(n+1))

def getDivisors(n):
	divisors = []
	for i in range(1, int(math.ceil(math.sqrt(n)))):
		if ((n%i) == 0):
			divisors.append(i)
			divisors.append(n/i)
	return divisors


triangleList = []
divisorsList = []
highlyComposite = {}
maxFactors = 1

#A number which has more factors than all smaller numbers is called a "highly composite"
#number. However, since the numbers being examined are restricted to being a
#triangular number, these are the highly composite triangular numbers.


#76576500 has 576

i=1
while maxFactors < 500:
	tn_i = efficientTriangleNumber(i)
	dn_i = len(getDivisors(tn_i))

	if dn_i > 500:
		maxFactors = dn_i
		highlyComposite[tn_i] = dn_i
		print maxFactors
		print getDivisors(tn_i)
	i+=1


print "Triangles!"
print triangleList
print
print "Divisors!"
print divisorsList
print
print "Composite!"
print highlyComposite
print
print len(triangleList)
print len(divisorsList)